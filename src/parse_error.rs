use std::fmt;

pub enum ParseError { 
    UnexpectedNullCharacter,
    UnexpectedQuestionMarkInsteadOfTagName,
    EndOfFileBeforeTagName,
    InvalidFirstCharacterOfTagName,
    MissingEndTagName,
    EndOfFileInTag,
    EndOfFileInScriptHtmlCommentLikeText,
    UnexpectedEqualsSignBeforeAttributeName,
    UnexpectedCharacterInAttributeName,
    MissingAttributeValue,
    UnexpectedCharacterInUnquotedAttributeValue,
    WhitespaceMissingBetweenAttributes,
    DuplicateAttribute,
    UnexpectedSolidusInTag,
    IncorrectlyOpenedComment,
    AbruptClosingOfEmptyComment,
    EndOfFileInComment,
    NestedComment,
    IncorrectlyClosedComment,
    EndOFileInDoctype,
    MissingWhitespaceBeforeDoctypeName,
    MissingDoctypeName,
    InvalidCharacterSequenceAfterDoctypeName,
    MissingSemicolonAfterCharacterReference,
    UnknownNamedCharacterReference,
    AbsenceOfDigitsInNumericCharacterReference,
    CharacterReferenceOutsideUnicodeRange,
    SurrogateCharacterReference,
    NonCharacterReference,
    ControlCharacterReference,
    MissingWhitespaceAfterDoctypePublicKeyword,
    MissingDoctypePublicIdentifier,
    MissingQuoteBeforeDoctypePublicIdentifier,
    MissingQuoteBeforeDoctypeSystemIdentifier,
    AbruptDoctypePublicIdentifier,
    MissingWhitespaceBetweenDoctypePublicAndSystemIdentifiers,
    MissingWhitespaceAfterDoctypeSystemKeyword,
    MissingDoctypeSystemIdentifier,
    AbruptDoctypeSystemIdentifier,
    UnexpectedCharacterAfterDoctypeSystemIdentifier,
    EndOfFileInCData
}

impl fmt::Display for ParseError { 
    fn fmt (&self, f: &mut fmt::Formatter) -> fmt::Result { 
        match self { 
            ParseError::UnexpectedNullCharacter => write!(f, "Unexpected null character"),
            ParseError::UnexpectedQuestionMarkInsteadOfTagName => write!(f, "Unexpected question mark instead of tag name"),
            ParseError::EndOfFileBeforeTagName => write!(f, "End of file before tag name"),
            ParseError::InvalidFirstCharacterOfTagName => write!(f, "Invalid first character of tag name"),
            ParseError::MissingEndTagName => write!(f, "Missing end tag name"),
            ParseError::EndOfFileInTag => write!(f, "End of file in tag"),
            ParseError::EndOfFileInScriptHtmlCommentLikeText => write!(f, "End of file in script HTML comment like text"),
            ParseError::UnexpectedEqualsSignBeforeAttributeName => write!(f, "Unexpected equals sign before attribute name"),
            ParseError::UnexpectedCharacterInAttributeName => write!(f, "Unexpected character in attribute name"),
            ParseError::MissingAttributeValue => write!(f, "Missing attribute value"),
            ParseError::UnexpectedCharacterInUnquotedAttributeValue => write!(f, "Unexpected character in unquoted attribute value"),
            ParseError::WhitespaceMissingBetweenAttributes => write!(f, "Whitespace missing between attributes"),
            ParseError::DuplicateAttribute => write!(f, "Duplicate attribute"),
            ParseError::UnexpectedSolidusInTag => write!(f, "Unexpected solidus in tag"),
            ParseError::IncorrectlyOpenedComment => write!(f, "Incorrectly opened comment"),
            ParseError::AbruptClosingOfEmptyComment => write!(f, "Abrupt closing of empty comment"),
            ParseError::EndOfFileInComment =>  write!(f, "End of file in comment"),
            ParseError::NestedComment =>  write!(f, "Nested comment"),
            ParseError::IncorrectlyClosedComment =>  write!(f, "Incorrectly closed comment"),
            ParseError::EndOFileInDoctype => write!(f, "End of file in doctype"),
            ParseError::MissingWhitespaceBeforeDoctypeName => write!(f, "Missing whitespace before doctype name"),
            ParseError::MissingDoctypeName => write!(f, "Missing doctype name"),
            ParseError::InvalidCharacterSequenceAfterDoctypeName =>  write!(f, "Invalid character sequence after doctype name"),
            ParseError::MissingSemicolonAfterCharacterReference => write!(f, "Missing semicolon after character reference"),
            ParseError::UnknownNamedCharacterReference => write!(f, "Unknown named character reference"),
            ParseError::AbsenceOfDigitsInNumericCharacterReference => write!(f, "Absence of digits in numeric character reference"),
            ParseError::CharacterReferenceOutsideUnicodeRange => write!(f, "Character reference outside unicode range"),
            ParseError::SurrogateCharacterReference => write!(f, "Surrogate character reference"),
            ParseError::NonCharacterReference => write!(f, "Non character reference"),
            ParseError::ControlCharacterReference => write!(f, "Control character reference"),
            ParseError::MissingWhitespaceAfterDoctypePublicKeyword => write!(f, "Missing whitespace after doctype public keyword"),
            ParseError::MissingDoctypePublicIdentifier => write!(f, "Missing doctype public identifier"),
            ParseError::MissingQuoteBeforeDoctypePublicIdentifier => write!(f, "Missing quote before doctype public identifier"),
            ParseError::AbruptDoctypePublicIdentifier => write!(f, "Abrupt doctype public identifier"),
            ParseError::MissingWhitespaceBetweenDoctypePublicAndSystemIdentifiers =>  write!(f, "Missing whitespace between doctype public and system identifiers"),
            ParseError::MissingQuoteBeforeDoctypeSystemIdentifier => write!(f, "Missing quote before doctype system identifier"),
            ParseError::MissingWhitespaceAfterDoctypeSystemKeyword =>  write!(f, "Missing whitespace after doctype system keyword"),
            ParseError::MissingDoctypeSystemIdentifier => write!(f, "Missing doctype system identifier"),
            ParseError::AbruptDoctypeSystemIdentifier =>  write!(f, "Abrupt doctype system identifier"),
            ParseError::UnexpectedCharacterAfterDoctypeSystemIdentifier => write!(f, "Unexpected character after doctype system identifier"),
            ParseError::EndOfFileInCData => write!(f, "End of file in c data"),
        }
    }
}